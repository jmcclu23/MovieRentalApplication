/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mcclure_joshua_smallproject;
import java.awt.BorderLayout;
import java.awt.Color;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;
/**
 *
 * @author Josh
 */
public class MovieRentalStoreView extends javax.swing.JFrame {
        static MovieModelInterface  movieModel;
        static ControllerInterface  controller;
        static ClientModelInterface clientModel;
    /**
     * Creates new form RentalView
     * @param controller
     * @param movieModel
     * @param clientModel
     */
        @SuppressWarnings("static-access")
    public MovieRentalStoreView(ControllerInterface controller, MovieModelInterface movieModel,ClientModelInterface clientModel) {	
		this.controller  = controller;
		this.movieModel  = movieModel;
                this.clientModel = clientModel;
    
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        showRentedMovies = new javax.swing.JButton();
        showAllCustomers = new javax.swing.JButton();
        createCustomer = new javax.swing.JButton();
        deleteCustomer = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        createMovie = new javax.swing.JButton();
        rentMovie = new javax.swing.JButton();
        returnMovie = new javax.swing.JButton();
        showAllMovies = new javax.swing.JButton();
        showMovieHistory = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        showRentedMovies.setText("Show Rented Movies");
        showRentedMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showRentedMoviesActionPerformed(evt);
            }
        });

        showAllCustomers.setText("Show All Customers");
        showAllCustomers.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllCustomersActionPerformed(evt);
            }
        });

        createCustomer.setText("Create Customer");
        createCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createCustomerActionPerformed(evt);
            }
        });

        deleteCustomer.setText("Delete Customer");
        deleteCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustomerActionPerformed(evt);
            }
        });

        jButton5.setText("Search For Customer");

        createMovie.setText("Create Movie");
        createMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createMovieActionPerformed(evt);
            }
        });

        rentMovie.setText("Rent Movie");
        rentMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentMovieActionPerformed(evt);
            }
        });

        returnMovie.setText("Return Movie");
        returnMovie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnMovieActionPerformed(evt);
            }
        });

        showAllMovies.setText("Show All Movies");
        showAllMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showAllMoviesActionPerformed(evt);
            }
        });

        showMovieHistory.setText("Show Movie History");
        showMovieHistory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showMovieHistoryActionPerformed(evt);
            }
        });

        jLabel1.setText("Rental Menu Options:");

        jLabel2.setText("Customer Menu Options");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(showRentedMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(showAllMovies, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(returnMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rentMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(createMovie, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(showMovieHistory, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addGap(78, 78, 78)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(deleteCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(createCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(showAllCustomers))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createMovie, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(createCustomer, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rentMovie)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(returnMovie, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(deleteCustomer)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showAllMovies)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showRentedMovies))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jButton5)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(showMovieHistory)
                    .addComponent(showAllCustomers))
                .addContainerGap(46, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void showRentedMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showRentedMoviesActionPerformed
        JTable rentedMovies = new JTable();
        JFrame frame = new JFrame();
        String[] colName = { "Movie ID","Movie Title","Status"};
        rentedMovies.getTableHeader().setBackground(Color.BLUE);
        rentedMovies.getTableHeader().setForeground(Color.BLUE);
        @SuppressWarnings("UnusedAssignment")
        List<String> temp = new ArrayList();
        temp = controller.showRentedMovies();
        String[] tempArray;
        Object[][] object = new Object[100][100];
        @SuppressWarnings("UnusedAssignment")
        int i = 0;
        if(!temp.isEmpty()){
            for(i = 0; i < temp.size(); i++){
                tempArray = temp.get(i).split(";");
                object[i][0] = tempArray[0];
                object[i][1] = tempArray[1];
                object[i][2] = tempArray[2];     
            } 
        }
        rentedMovies = new JTable(object, colName);    
        JScrollPane scrollPane = new JScrollPane(rentedMovies);
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.setSize(300, 300);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);                             
    }//GEN-LAST:event_showRentedMoviesActionPerformed

    private void showAllCustomersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllCustomersActionPerformed
        JTable allCustomers = new JTable();
        JFrame frame = new JFrame();
        String[] colName = { "Customer ID", "Customer Name", "Status"};
        allCustomers.getTableHeader().setBackground(Color.BLUE);
        allCustomers.getTableHeader().setForeground(Color.BLUE);
        @SuppressWarnings("UnusedAssignment")
        List<String> temp = new ArrayList();
        temp = controller.showAllCustomers();
        String[] tempArray;
        Object[][] object = new Object[100][100];
        @SuppressWarnings("UnusedAssignment")
        int i = 0;
        if(!temp.isEmpty()){
            for(i = 0; i < temp.size(); i++){
                tempArray = temp.get(i).split(";");
                object[i][0] = tempArray[0];
                object[i][1] = tempArray[1];
                object[i][2] = tempArray[2];
            } 
        }
        allCustomers = new JTable(object, colName);    
        JScrollPane scrollPane = new JScrollPane(allCustomers);
        frame.add(scrollPane, BorderLayout.CENTER);
        frame.setSize(300, 300);
        frame.setVisible(true);
        frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }//GEN-LAST:event_showAllCustomersActionPerformed

    private void showAllMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showAllMoviesActionPerformed
        JFrame showAllMovieframe = new JFrame();
        JTable allMovies = new JTable();
        String[] colName = { "Movie ID","Movie Title","Status"};
        allMovies.getTableHeader().setBackground(Color.BLUE);
        allMovies.getTableHeader().setForeground(Color.BLUE);
        @SuppressWarnings("UnusedAssignment")
        List<String> temp = new ArrayList();
        temp = controller.showAllMovies();
        String[] tempArray;
        Object[][] object = new Object[100][100];
        @SuppressWarnings("UnusedAssignment")
        int i = 0;
        if(!temp.isEmpty()){
            for(i = 0; i < temp.size(); i++){
                tempArray = temp.get(i).split(";");
                object[i][0] = tempArray[0];
                object[i][1] = tempArray[1];
                object[i][2] = tempArray[2];
            } 
        }
        allMovies = new JTable(object, colName);    
        JScrollPane scrollPane = new JScrollPane(allMovies);
        showAllMovieframe.add(scrollPane, BorderLayout.CENTER);
        showAllMovieframe.setSize(300, 300);
        showAllMovieframe.setVisible(true);
        showAllMovieframe.setDefaultCloseOperation(DISPOSE_ON_CLOSE);       
    }//GEN-LAST:event_showAllMoviesActionPerformed

    private void createMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createMovieActionPerformed
        JFrame frame = new JFrame();
        String inputValue = JOptionPane.showInputDialog("Please Input Movie Title");
        if(inputValue != null){
            if(!(inputValue.equalsIgnoreCase(""))){
                try {
                    Object[] options = { "OK"};
                    String returnValue = controller.createMovie(inputValue);
                    int n = JOptionPane.showOptionDialog(frame,
                            returnValue,"Movie Added",JOptionPane.PLAIN_MESSAGE,
                            JOptionPane.QUESTION_MESSAGE, null,options,options[0]);
                
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MovieRentalStoreView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_createMovieActionPerformed

    private void createCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createCustomerActionPerformed
        JFrame frame = new JFrame();
        String inputValue = JOptionPane.showInputDialog("Please Input Customer Name");
        if(inputValue != null){
            if(!(inputValue.equalsIgnoreCase(""))){
                try {
                    Object[] options = { "OK"};
                    String returnValue = controller.addCustomer(inputValue);
                    int n = JOptionPane.showOptionDialog(frame,
                            returnValue,"Customer Added",JOptionPane.PLAIN_MESSAGE,
                            JOptionPane.QUESTION_MESSAGE, null,options,options[0]);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MovieRentalStoreView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }     
    }//GEN-LAST:event_createCustomerActionPerformed

    private void returnMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnMovieActionPerformed
        JFrame frame = new JFrame();
        String inputValue = JOptionPane.showInputDialog("Please Input Movie To Return");
        if(inputValue != null){
            if(!(inputValue.equalsIgnoreCase(""))){
                try {
                    Object[] options = { "OK"};
                    String returnValue = controller.returnMovie(inputValue);
                    int n = JOptionPane.showOptionDialog(frame,
                            returnValue,"Movie Returned",JOptionPane.PLAIN_MESSAGE,
                            JOptionPane.QUESTION_MESSAGE, null,options,options[0]);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MovieRentalStoreView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_returnMovieActionPerformed

    private void showMovieHistoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showMovieHistoryActionPerformed
        JFrame frame = new JFrame();
        String inputValue = JOptionPane.showInputDialog("Please Input Movie Title");
        if(inputValue != null){
            if(!(inputValue.equalsIgnoreCase(""))){
                @SuppressWarnings("MismatchedReadAndWriteOfArray")
                Object[] options = { "OK"};
                JTable movieHistory = new JTable();
                String[] colName = { "ID" , "Date Out", "Date In", "Customer ID",
                                    "Customer Name"};
                movieHistory.getTableHeader().setBackground(Color.BLUE);
                movieHistory.getTableHeader().setForeground(Color.BLUE);
                @SuppressWarnings("UnusedAssignment")
                List<String> temp = new ArrayList();
                temp = controller.showMovieHistory(inputValue);
                String[] tempArray;
                Object[][] object = new Object[100][100];
                @SuppressWarnings("UnusedAssignment")
                int i = 0;
                if(!temp.isEmpty()){
                    for(i = 0; i < temp.size(); i++){
                        tempArray = temp.get(i).split(";");
                        object[i][0] = tempArray[0];
                        object[i][1] = tempArray[2];
                        object[i][2] = tempArray[3];
                        object[i][3] = tempArray[1];
                        object[i][4] = tempArray[4];
                    }   
                }
                movieHistory = new JTable(object, colName);
                JScrollPane scrollPane = new JScrollPane(movieHistory);
                frame.add(scrollPane, BorderLayout.CENTER);
                frame.setSize(500, 300);
                frame.setVisible(true);
                frame.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            }
        } 
    }//GEN-LAST:event_showMovieHistoryActionPerformed

    private void rentMovieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentMovieActionPerformed
        JFrame frame = new JFrame();
        JTextField customerName = new JTextField(50);
        JTextField movieTitle = new JTextField(50);
        JPanel myPanel = new JPanel();
        Box textboxPanel = Box.createVerticalBox();
        textboxPanel.add(new JLabel("Customer Name: "));
        textboxPanel.add(customerName);
        textboxPanel.add(new JLabel("Movie Title: "));
        textboxPanel.add(movieTitle);
        myPanel.add(textboxPanel);
        int result = JOptionPane.showConfirmDialog(null, myPanel, 
        "Rent a Movie", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            if(!(customerName.getText().equalsIgnoreCase("")||movieTitle.getText().equalsIgnoreCase(""))){
                try {
                    String returnValue = controller.rentMovie(movieTitle.getText(), customerName.getText());
                    Object[] options = { "OK"};
                    int n = JOptionPane.showOptionDialog(frame,
                            returnValue,"Movie Returned",JOptionPane.PLAIN_MESSAGE,
                            JOptionPane.QUESTION_MESSAGE, null,options,options[0]);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MovieRentalStoreView.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }      
    }//GEN-LAST:event_rentMovieActionPerformed

    private void deleteCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustomerActionPerformed
        JFrame frame = new JFrame();
        String inputValue = JOptionPane.showInputDialog("Please Input A Customer To Delete");
        if(inputValue != null){
            if(!(inputValue.equalsIgnoreCase(""))){
                Object[] options = { "OK"};
                String returnValue = controller.deleteCustomer(inputValue);
                int n = JOptionPane.showOptionDialog(frame,
                        returnValue,"Customer Deleted",JOptionPane.PLAIN_MESSAGE,
                        JOptionPane.QUESTION_MESSAGE, null,options,options[0]);
            }
        }
    }//GEN-LAST:event_deleteCustomerActionPerformed

    /**
     * @param args the command line arguments
     */
        @SuppressWarnings("Convert2Lambda")
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieRentalStoreView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieRentalStoreView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieRentalStoreView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieRentalStoreView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @SuppressWarnings("override")
            public void run() {
                JFileChooser chooser = new JFileChooser();
                chooser.setCurrentDirectory(new java.io.File("."));
                chooser.setDialogTitle("choosertitle");
                chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
                chooser.setAcceptAllFileFilterUsed(true);
                if (chooser.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
                    File f = chooser.getSelectedFile();
                    // if the user accidently click a file, then select the parent directory.
                    if (!f.isDirectory()) {
                        f = f.getParentFile();
                    }
                    String fileName = f + "/";
                    System.out.println("getCurrentDirectory(): " + chooser.getCurrentDirectory());
                    System.out.println("getSelectedFile() : " + fileName);
                    f = new File(fileName);
                    MovieModelInterface   movieModel = new MovieModel(fileName);
                    ClientModelInterface clientModel = new ClientModel(fileName);
                    ControllerInterface controller = new Controller(movieModel,clientModel);
                } else  {
                    MovieModelInterface   movieModel = new MovieModel();
                    ClientModelInterface clientModel = new ClientModel();
                    ControllerInterface controller = new Controller(movieModel,clientModel);
                }   
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton createCustomer;
    private javax.swing.JButton createMovie;
    private javax.swing.JButton deleteCustomer;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JButton rentMovie;
    private javax.swing.JButton returnMovie;
    private javax.swing.JButton showAllCustomers;
    private javax.swing.JButton showAllMovies;
    private javax.swing.JButton showMovieHistory;
    private javax.swing.JButton showRentedMovies;
    // End of variables declaration//GEN-END:variables

    void run() {
        new MovieRentalStoreView(controller, movieModel, clientModel).setVisible(true);    
    }
}
